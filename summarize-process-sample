#!/usr/bin/php
<?php

$warnings = [];
$threads = [];
$currentThread = '';
while (($line = fgets(STDIN)) !== false) {
  $line = rtrim($line);

  if (strstr($line, 'Dispatch Thread Soft Limit Reached'))
    $warnings[] = $line;

  // Find the beginning of each thread's stackframes.
  
  // Output of `sample`:
  //     2429 Thread_581686   DispatchQueue_1: com.apple.main-thread  (serial)
  //     2429 Thread_582207
  //     2429 Thread_582387: QQmlThread
  if (preg_match('/^\s{4}(\d+) (Thread_(\d+|<multiple>)((: |   )(.*))?)$/', $line, $matches))
    $currentThread = $matches[2];

  // Output of `spindump`:
  // Thread 0x262d17         DispatchQueue 1         1000 samples (1-1000)   priority 18-31 (base 31)                        cpu time 9.808s
  // Thread 0x262d18         DispatchQueue 2         1000 samples (1-1000)   priority 61 (base 61)   cpu time 0.008s
  // Thread 0x262d32         1000 samples (1-1000)   priority 31 (base 31)
  else if (preg_match('/^  (Thread .*)$/', $line, $matches))
    $currentThread = $matches[1];

  // Have we reached the end of the thread stacks?
  else if (preg_match('/^(Total number in stack.*|  Binary Images:)$/', $line))
    break;

  else if (!empty($currentThread)) {
    if (substr($line, 0, 6) === '    + ')
      $threads[$currentThread][] = substr($line, 6);
    else
      $threads[$currentThread][] = $line;
  }
}

print 'Sampled ' . count($threads) . " threads.\n";

if (count($warnings))
  print "\nWarnings:\n\t" . implode("\t", $warnings);

// Cull system/thread-startup noise.
$fluff = [
  'start_wqthread',
  '_pthread_wqthread',
  '_dispatch_worker_thread2',
  '_dispatch_root_queue_drain',
  '_dispatch_queue_override_invoke',
  '_dispatch_client_callout',
  '_dispatch_call_block_and_release',
  '_dispatch_async_redirect_invoke',
  '_dispatch_continuation_pop',
  '_dispatch_lane_barrier_sync_invoke_and_complete',
  '_dispatch_sema4_wait',
  'thread_start',
  '_pthread_start',
  '_pthread_body',
  '__psynch_cvwait',
  'glcDebugListener',
  'mach_msg_trap',
  'CFRunLoopRunSpecific',
  '__CFRunLoopRun',
  '__CFRunLoopDoSource1',
  '__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__',
  '_NSEventThread',
  '__CFRunLoopServiceMachPort',
  '-\[NSApplication\(NSEvent\) _nextEventMatchingEventMask',
  'AEProcessAppleEvent',
  'aeProcessAppleEvent',
  'dispatchEventAndSendReply',
  'aeDispatchAppleEvent',
  '_NSAppleEventManagerGenericHandler',
  '-\[NSAppleEventManager dispatchRawAppleEvent',
  '-\[NSApplication\(NSAppleEventHandling\) _handleCoreEvent:withReplyEvent:',
  '.*-\[NSApplication\(NSAppleEventHandling\) _handleAEOpenDocumentsForURLs',
  '-\[NSApplication\(NSAppleEventHandling\) _openURLs:withCompletionHandler:',
  '-\[NSApplication _nextEventMatchingEventMask',
  'withWindowOrderingObserverHeuristic',
  'start',
  '_DPSNextEvent',
  '_BlockUntilNextEventMatchingListInModeWithFilter',
  'ReceiveNextEventCommon',
  '__CFRunLoopDoObservers',
  'semaphore_wait_trap',
  '__workq_kernreturn',
  '_dispatch_workloop_worker_thread',
  '_dispatch_lane_invoke',
  '_dispatch_lane_serial_drain',
  '_dispatch_source_invoke',
  '_dispatch_event_loop_wait_for_ownership',
  '_dispatch_ulock_wait',
  '__ulock_wait',
  '__DISPATCH_WAIT_FOR_QUEUE__',
  'CVDisplayLink::runIOThread',
  'CVDisplayLink::waitUntil',
  'QGuiApplicationPrivate',
  'QCoreApplication::notifyInternal2',
  'QApplicationPrivate',
  'QWidgetPrivate',
  'WaitOnCondition',
  '\?\?\? \(MediaToolbox',
  '\?\?\? \(VideoToolbox',
  '\?\?\? \(kernel',
  'QEventDispatcherUNIX::processEvents',
  'QEventDispatcherUNIXPrivate::doSelect',
  'RunCurrentEventLoopInMode',
  '__CFRunLoopDoSources0',
  '__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__',
  'hndl_mach_',
  'ipc_kmsg_',
  'ipc_right_',
  'ipc_mqueue_',
  'mach_call_munger',
  'mach_msg_overwrite_trap',
  '_kernelrpc_mach_port_deallocate_trap',
  'mach_kauth_cred_uthread_update',
  'mach_port_deallocate',
  'current_proc',
  'malloc_zone_malloc',
  'szone_malloc_should_clear',
  'tiny_malloc_from_free_list',
  '\+\[_NS',
  '_NS',
  '_dispatch_mgr_thread',
  'kevent_qos',
  'psynch_cvcontinue',
  'CAPThread',
  'XThread::RunHelper',
  'MIDIProcess::RunMIDIInThread',
  'XServerMachPort::ReceiveMessage',
  'CFRunLoopWakeUp',
  'GenericRunLoopThread::Entry',
];
foreach ($threads as &$thread)
  foreach ($thread as $key => $stackframe)
    foreach ($fluff as $func)
      if (empty($stackframe) || preg_match("/^[\s!|:+*]*\d+ {1,4}$func/", $stackframe))
        unset($thread[$key]);

// Ignore threads without any remaining frames.
foreach ($threads as $key => $thread)
  if (count($thread) == 0)
    unset($threads[$key]);

// Group threads by functions in their callstack (ignoring thread name, library, offset, and address).
$uniqueThreads = [];
foreach ($threads as $threadName => $thread) {
  $functions = [];
  foreach ($thread as $key => $stackframe)
    if (preg_match("/^[\s!*]*\d+ {1,2}(.*) ( \(in .*\) \+ \d+|\+ \d+ \(.*\) \[.*\])/", $stackframe, $matches))
      $functions[] = $matches[1];
  $threadHash = implode(';', $functions);
  if (isset($uniqueThreads[$threadHash]))
    ++$uniqueThreads[$threadHash][0];
  else
    $uniqueThreads[$threadHash] = [
      1,
      $threadName,
      $thread,
    ];
}
usort($uniqueThreads, function ($a, $b) { return -($a[0] <=> $b[0]); });

print "\n";
print "Stack traces with similar threads grouped:\n";
foreach ($uniqueThreads as $uniqueThread) {
  printf("%5d x \033[36m%s\033[0m\n", $uniqueThread[0], $uniqueThread[1]);
  foreach ($uniqueThread[2] as $stackframe)
    print "            $stackframe\n";
}
